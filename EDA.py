# -*- coding: utf-8 -*-
"""GP_EDA_Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1if5ClvefKacs8Op0QmcJxmIzOy2zSc37
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import matplotlib.pyplot as plt
from scipy.signal import argrelextrema

df = pd.read_excel('data_dialy.xlsx')
df_weekly = pd.read_excel('data_weekly.xlsx')
df_monthly = pd.read_excel('data_monthly.xlsx')

df.head()

df.rename(columns = {'Unnamed: 0' : 'row'}, inplace = True)
# df.drop('Unnamed: 0', inplace=True, axis=1)
df.drop('real_volume', inplace=True, axis=1)

df_weekly.rename(columns = {'Unnamed: 0' : 'row'}, inplace = True)
# df_weekly.drop('Unnamed: 0', inplace=True, axis=1)
df_weekly.drop('real_volume', inplace=True, axis=1)

df_monthly.rename(columns = {'Unnamed: 0' : 'row'}, inplace = True)
# df_monthly.drop('Unnamed: 0', inplace=True, axis=1)
df_monthly.drop('real_volume', inplace=True, axis=1)

df.head()

df.tail()

fig = go.Figure(data=[go.Candlestick(x=df['time'],
                open=df['open'], high=df['high'],
                low=df['low'], close=df['close'])
                     ])

fig.update_layout(xaxis_rangeslider_visible=False)
fig.show()

s = False
r = False
temp = []
def support(df1, l, n1, n2): #n1 n2 before and after candle l
    for i in range(l-n1+1, l+1):
        if(df1.low[i]>df1.low[i-1]):
            return 0
    for i in range(l+1,l+n2+1):
        if(df1.low[i]<df1.low[i-1]):
            return 0
    return 1

#support(df,46,3,2)

def resistance(df1, l, n1, n2): #n1 n2 before and after candle l
    for i in range(l-n1+1, l+1):
        if(df1.high[i]<df1.high[i-1]):
            return 0
    for i in range(l+1,l+n2+1):
        if(df1.high[i]>df1.high[i-1]):
            return 0
    return 1
#resistance(df, 30, 3, 5)

sr_dialy = []
x_axis = []
y_axis = []
n1=3
n2=2


for row in range(5, len(df)-n2): #len(df)-n2
    if support(df, row, n1, n2):
        sr_dialy.append((row,df.low[row],1))
        x_axis.append(row)
        y_axis.append(df.low[row])
    if resistance(df, row, n1, n2):
        sr_dialy.append((row,df.high[row],2))
        x_axis.append(row)
        y_axis.append(df.low[row])
print(sr_dialy)

#sr_dialy[150][2]

c = len(sr_dialy)-1
while (not s) or (not r):
  if (not s) and (sr_dialy[c][2] == 1):
    temp.append(sr_dialy[c])
    s = True
  elif (not r) and (sr_dialy[c][2] == 2):
    temp.append(sr_dialy[c])
    r = True

  c-=1


s = False
r = False
temp

sr_weekly = []
n1=3
n2=2
for row in range(3, len(df_weekly)-n2): #len(df)-n2
    if support(df_weekly, row, n1, n2):
        sr_weekly.append((row,df_weekly.low[row],1))
    if resistance(df_weekly, row, n1, n2):
        sr_weekly.append((row,df_weekly.high[row],2))
print(sr_weekly)
len(sr_weekly)

c = len(sr_weekly)-1
while (not s) or (not r):
  if (not s) and (sr_weekly[c][2] == 1):
    temp.append(sr_weekly[c])
    s = True
  elif (not r) and (sr_weekly[c][2] == 2):
    temp.append(sr_weekly[c])
    r = True

  c-=1


s = False
r = False
temp

sr_monthly = []
n1=3
n2=2
for row in range(3, len(df_monthly)-n2): #len(df)-n2
    if support(df_monthly, row, n1, n2):
        sr_monthly.append((row,df_monthly.low[row],1))
    if resistance(df_monthly, row, n1, n2):
        sr_monthly.append((row,df_monthly.high[row],2))
print(sr_monthly)
len(sr_monthly)


c = len(sr_monthly)-1
while (not s) or (not r):
  if (not s) and (sr_monthly[c][2] == 1):
    temp.append(sr_monthly[c])
    s = True
  elif (not r) and (sr_monthly[c][2] == 2):
    temp.append(sr_monthly[c])
    r = True

  c-=1


s = False
r = False
temp

support_resistance = []
c = 0
for i in range(len(df)):
  if (c >= len(sr_dialy)):
    support_resistance.append(0)
  elif (df['row'][i] == sr_dialy[c][0]):
      support_resistance.append(sr_dialy[c][2])
      c+=1

  else:
    support_resistance.append(0)

print(c)
print(len(sr_dialy))

df['Supprt Resistance'] = support_resistance
df

fig = go.Figure(data=[go.Candlestick(x=df['time'],
                open=df['open'], high=df['high'],
                low=df['low'], close=df['close'])
                     ])

fig.update_layout(xaxis_rangeslider_visible=False)


for i in range(2):
    fig.add_shape(type='line', x0=df.iloc[0]['time'], y0=temp[i][1],
                  x1=df.iloc[len(df)-1]['time'],
                  y1=temp[i][1],
                  line=dict(color="Gray",width=5)
                  )

for i in range(2,4):
    fig.add_shape(type='line', x0=df.iloc[0]['time'], y0=temp[i][1],
                  x1=df.iloc[len(df)-1]['time'],
                  y1=temp[i][1],
                  line=dict(color="Blue",width=5)
                  )
    
for i in range(4,6):
    fig.add_shape(type='line', x0=df.iloc[0]['time'], y0=temp[i][1],
                  x1=df.iloc[len(df)-1]['time'],
                  y1=temp[i][1],
                  line=dict(color="Red",width=5)
                  )

fig.show()

fig = go.Figure(data=[go.Candlestick(x=df['time'],
                open=df['open'], high=df['high'],
                low=df['low'], close=df['close'])
                     ])

fig.update_layout(xaxis_rangeslider_visible=False)

for i in range(2):
  k = temp[i][0]
  fig.add_shape(type='line', x0=df.iloc[k-5]['time'], y0=temp[i][1],
                x1=df.iloc[k+5]['time'],
                y1=temp[i][1],
                line=dict(color="Gray",width=5)
                )
  
fig.show()

df_weekly

fig1 = go.Figure(data=[go.Candlestick(x=df_weekly['time'],
                open=df_weekly['open'], high=df_weekly['high'],
                low=df_weekly['low'], close=df_weekly['close'])
                     ])

fig.update_layout(xaxis_rangeslider_visible=False)

for i in range(2,4):
  k = temp[i][0]
  fig.add_shape(type='line', x0=df_weekly.iloc[k-5]['time'], y0=temp[i][1],
                x1=df_weekly.iloc[k+5]['time'],
                y1=temp[i][1],
                line=dict(color="Blue",width=5)
                )
  
fig.show()

temp[2]

fig = go.Figure(data=[go.Candlestick(x=df_monthly['time'],
                open=df_monthly['open'], high=df_monthly['high'],
                low=df_monthly['low'], close=df_monthly['close'])
                     ])

fig.update_layout(xaxis_rangeslider_visible=False)

for i in range(4,6):
  k = temp[i][0]
  fig.add_shape(type='line', x0=df_monthly.iloc[k-5]['time'], y0=temp[i][1],
                x1=df_monthly.iloc[k+5]['time'],
                y1=temp[i][1],
                line=dict(color="Red",width=5)
                )
  
fig.show()

df['close'].plot(figsize=(25,8))
plt.scatter(x=x_axis,y=y_axis,color='orange')

def pipeline(df):
  global breakpoint_up,breakpoint_down
  df_len = len(df)
  df['Number'] = np.arange(df_len)+1
  df_high = df.copy()
  df_low = df.copy()
  df.head()

  while len(df_high)>2:
    slope, intercept, r_value, p_value, std_err = linregress(x=df_high['Number'], y=df_high['high'])
    df_high = df_high.loc[df_high['high'] > slope * df_high['Number'] + intercept]
  while len(df_low)>2:
    slope, intercept, r_value, p_value, std_err = linregress(x=df_low['Number'], y=df_low['low'])
    df_low = df_low.loc[df_low['low'] < slope * df_low['Number'] + intercept]
    
  

  slope, intercept, r_value, p_value, std_err = linregress(x=df_high['Number'], y=df_high['close'])
  df['Uptrend'] = slope * df['Number'] + intercept

  slope, intercept, r_value, p_value, std_err = linregress(x=df_low['Number'], y=df_low['close'])
  df['Downtrend'] = slope * df['Number'] + intercept
  df_high=df_high.reset_index()
  df_low=df_low.reset_index()


  if len(df_high)>=2:

    breakpoint_up=df.loc[df['time']==str(df_high['time'][0])]
    breakpoint_up=breakpoint_up.reset_index()
  if len(df_low)>=2:
    breakpoint_down=df.loc[df['time']==str(df_low['time'][0])]
    breakpoint_down=breakpoint_down.reset_index()

  df_low.tail()
  df_high.tail()
  df.tail()
  df=df.reset_index()
  df=df.drop('index',axis=1)
  
  return(df)

df1=pipeline(df)

breakpoint_up

def draw_trend_line(df):
  if df['Downtrend'][len(df)-1]-df['Downtrend'][0] >0:

      fig.update_layout(
        shapes = [dict(x0=breakpoint_down['time'][0],x1=df['time'][len(df)-1],y0=breakpoint_down['Downtrend'].sum(),y1=df['Downtrend'][len(df)-1],type='line',line=dict(color="Black",width=2))])
      fig.show()
  
  if df['Uptrend'][len(df)-1]-df['Uptrend'][0] <0:
      fig.update_layout(
        shapes = [dict(x0=breakpoint_up['time'][0],x1=df['time'][len(df)-1],y0=breakpoint_up['Uptrend'].sum(),y1=df['Uptrend'][len(df)-1],type='line',line=dict(color="Black",width=2))])
      fig.show()

draw_trend_line(df1)

df2=pipeline(df[:500])
df2.head()

breakpoint_up

draw_trend_line(df2)

z=df['close'].rolling(window=3).mean().dropna()
local_max = argrelextrema(z.values, np.greater)[0]

def get_max_min(prices, smoothing, window_range):
    prices=prices.set_index(prices['time'])
    smooth_prices = prices['close'].rolling(window=smoothing).mean().dropna()
    local_max = argrelextrema(smooth_prices.values, np.greater)[0]
    local_min = argrelextrema(smooth_prices.values, np.less)[0]
    price_local_max_dt = []
    for i in local_max:
        if (i>window_range) and (i<len(prices)-window_range):
            price_local_max_dt.append(prices.iloc[i-window_range:i+window_range]['close'].idxmax())
    price_local_min_dt = []
    for i in local_min:
        if (i>window_range) and (i<len(prices)-window_range):
            price_local_min_dt.append(prices.iloc[i-window_range:i+window_range]['close'].idxmin())  
    maxima = pd.DataFrame(prices.loc[price_local_max_dt])
    minima = pd.DataFrame(prices.loc[price_local_min_dt])
    max_min = pd.concat([maxima, minima]).sort_index()
    max_min.index.name = 'date'
    max_min = max_min.reset_index()
    max_min = max_min[~max_min.date.duplicated()]
    p = prices  
    #print(p) 
    max_min['day_num'] = p[p['time'].isin(max_min.date)].index.values
    max_min = max_min.set_index('day_num')['close']
    return max_min

minmax = get_max_min(df, 10, 30)
minmax

from collections import defaultdict

def find_patterns(max_min):  
    max_min=max_min.reset_index()
    patterns = defaultdict(list)
    
    # Window range is 5 units
    for i in range(5, len(max_min)):  
        window = max_min.iloc[i-5:i]
        
        # Pattern must play out in less than n units
        if window.index[-1] - window.index[0] > 100:      
            continue   
        a, b, c, d, e = window['close'].iloc[0:5]
                
        # IHS
        if a<b and c<a and c<e and c<d and e<d and abs(b-d)<=np.mean([b,d])*0.02:
               patterns['IHS'].append((window.index[0], window.index[-1]))
        
    return patterns

patterns = find_patterns(minmax)
patterns

minmax.values

from1=patterns['IHS'][0][0] 
to1=patterns['IHS'][0][1]

from2=patterns['IHS'][1][0]
to2=patterns['IHS'][1][1]

x=df.set_index(df['time'])
x['close'].plot(figsize=(25,8))
plt.scatter(x=minmax.index[from1:to1+1],y=minmax.values[from1:to1+1],color='orange')
plt.scatter(x=minmax.index[from2:to2+1],y=minmax.values[from2:to2+1],color='green')

df

